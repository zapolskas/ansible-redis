---

- name: sample
  hosts: linux
  become: yes
  vars:
    ansible_user: ansible
    pcre_version: pcre-8.44
    zlib_version: zlib-1.2.11
    openssl_version: openssl-1.1.1d
    nginx_version: nginx-1.17.4
    redis_port: 6379
    redis_databases: 1
    redis_module_version: v0.15
    redis_module: redis2-nginx-module-0.15
    nginx_tarball_url: "http://nginx.org/download/{{ nginx_version }}.tar.gz"
    nginx_install_dir: "/tmp/{{ nginx_version }}"
    nginx_sbin_path: "/usr/sbin/nginx"
    nginx_conf_path: "/etc/nginx/nginx.conf"
    nginx_custom_modules: "--with-pcre=/tmp/pcre-8.44 --with-zlib=/tmp/zlib-1.2.11 --with-stream --with-mail=dynamic --add-module=/tmp/{{ redis_module }}"
    redis2_nginx_module_url: "https://github.com/openresty/redis2-nginx-module/archive/v0.15.tar.gz"
  tasks:
    - name: install epel
      when: ansible_distribution == 'CentOS'
      yum:
        name: "{{ packages }}"
        state: installed
      vars:
        packages: 
        - epel-release
 
    - name: Installing NGINX Dependencies
      yum:
        name: ['unzip','ufw']
        update_cache: yes
      with_items:
        - unzip
        - ufw

    - name: Install build tools
      yum:
        name: "@Development tools"
        state: latest
      become: yes
      when: ansible_distribution == 'CentOS'

    - name: Install build tools
      apt:
        name: build-essential
        state: present
      become: yes
      when: ansible_distribution == 'Ubuntu'

    - name: Downloading pcre source
      get_url:
        url: "https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz"
        dest: "/tmp/pcre.tar.gz"
      register: pcre_tar
    
    - name: Unpacking pcre
      unarchive:
        copy: no
        dest: /tmp/
        src: "{{ pcre_tar.dest }}"
      register: pcre_unpack
      when: pcre_tar.changed
    
      #- name: compile pcre
      #become: yes
      #shell: "./configure --prefix=/usr/local/pcre-8.44 && make && make install"
      #args:
      #  chdir: "/tmp/pcre-8.44"
      #when: pcre_tar.changed
        
      #   - name: make pcre
      #become: yes
      #shell: make && make install
      #args:
      #  chdir: "/tmp/pcre-8.44"
      #when: pcre_tar.changed

    - name: Downloading zlib source
      get_url:
        url: "http://zlib.net/zlib-1.2.11.tar.gz"
        dest: "/tmp/zlib.tar.gz"
      register: zlib_tar

    - name: Unpacking zlib
      unarchive:
        copy: no
        dest: /tmp
        src: "{{ zlib_tar.dest }}"
      when: zlib_tar.changed  
    
      #- name: compile zlib
      #become: yes
      #shell: "./configure --prefix=/usr/local/zlib-1.2.11 && make && make install"
      #args:
      #  chdir: "/tmp/zlib-1.2.11"
      #when: zlib_tar.changed    
        
      #- name: Downloading openssl source
      #get_url:
      #  url: "http://www.openssl.org/source/openssl-1.1.1d.tar.gz"
      #   dest: "/tmp/openssl.tar.gz"
      #register: openssl_tar

      #- name: Unpack openssl
      #unarchive: 
      #  copy: no
      #  dest: /tmp
      #  src: "{{ openssl_tar.dest }}"
      #when: openssl_tar.changed

      #- name: Compile openssl
      #become: yes
      #command: "./Configure linux-x86_64 --prefix=/usr"
      #args:
      #  chdir: "/tmp/openssl-1.1.1d"
      #when: openssl_tar.changed    

      #- name: Make openssl
      #become: yes
      #shell: make && make install
      #args:
      #  chdir: "/tmp/openssl-1.1.1d"
      #when: openssl_tar.changed 

    - name: Downloading NGINX sources
      get_url:
        url: "{{ nginx_tarball_url }}"
        dest: "/tmp/{{ nginx_version }}.tar.gz"
      register: nginx_source
    
    - name: Downloading redi2 module sources
      get_url:
        url: "{{ redis2_nginx_module_url }}" 
        dest: "/tmp/{{ redis_module_version }}.tar.gz"
      register: redis2_module_source                                                                                                                              
    - name: Unpacking NGINX
      unarchive:
        copy: no
        dest: /tmp/
        src: "{{ nginx_source.dest }}"
      when: nginx_source.changed
      register: nginx_source_unpack

    - name: Unarchive REDIS_module
      unarchive:
        copy: no
        dest: /tmp/
        src: "{{ redis2_module_source.dest }}"
      when: redis2_module_source.changed

    - name: Create required Nginx dirs
      become: yes
      file:
        path: /etc/nginx
        state: directory
        owner: root
        mode: 0755

    - name: Configuring NGINX source with custom modules
      command: "./configure --sbin-path={{ nginx_sbin_path }} --conf-path={{ nginx_conf_path }} {{ nginx_custom_modules }}"
      args:
        chdir: "{{ nginx_install_dir }}"
      when: nginx_source_unpack is changed
      register: nginx_configure

    - name: Installing NGINX
      become: yes
      shell: make && make install
      args:
        chdir: "{{ nginx_install_dir }}"
      when: nginx_configure is changed

    - name: Creating NGINX conf file
      become: yes
      template:
        src: nginx.conf
        dest: "{{ nginx_conf_path }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Installing NGINX init script (service)
      become: yes
      template:
        src: nginx.service
        dest: /lib/systemd/system/nginx.service
        owner: root
        group: root
        mode: 0755

    - name: Starting "{{ item }}"
      become: yes
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - nginx
        - ufw 

    - name: Allow http traffic
      ufw:
        rule: allow
        port: 80
        proto: tcp 
      notify: Restart ufw

    - name: Ensure Redis is present
      become: yes
      yum:
        name: redis 
        state: present
    - name: Ensure Redis is started
      service: 
        name: redis
        state: started
      become: yes
    - name: Redis configuration
      template:
        src: redis.conf
        dest: /etc/redis.conf
        owner: root
        group: root
        mode: 0644
      become: yes
      notify: Redis Restart

  handlers:

    - name: Restart ufw
      service:
        name: ufw
        state: restarted
        enabled: yes
      become: true

    - name: Redis Restart
      service:
        name: redis
        state: restarted
        enabled: yes
      become: true

    - name: Nginx Restart
      service:
        name: nginx
        state: restarted
        enabled: yes
      become: true
